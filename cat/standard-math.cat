// Dedicated to the public domain by Christopher Diggins
// This file is free to be used, modified or redistributed for any purpose,
// without restriction, obligation or warantee.
// http://www.cdiggins.com

//=============================================================================
// Dynamically dispatched functions

define neg : (any -> any)
{{
  desc:
    Negates a values.
}}
{
  [
    [neg_int] int_type
    [neg_dbl] double_type
  ] list
  dispatch1
}

define add : (any any -> any)
{
  [
    [add_int] int_type
    [add_dbl] double_type
    [add_byte] byte_type
    [add_bit] bit_type
    [add_str] string_type
  ] list
  dispatch2
}

define sub : (any any -> any)
{
  [
    [sub_int] int_type
    [sub_dbl] double_type
    [sub_byte] byte_type
    [sub_bit] bit_type
  ] list
  dispatch2
}

define mul : (any any -> any)
{
  [
    [mul_int] int_type
    [mul_dbl] double_type
    [mul_byte] byte_type
    [mul_bit] bit_type
  ] list
  dispatch2
}

define mod : (any any -> any)
{
  [
    [mod_int] int_type
    [mod_dbl] double_type
    [mod_byte] byte_type
    [mod_bit] bit_type
  ] list
  dispatch2
}

define div : (any any -> any)
{
  [
    [div_int] int_type
    [div_dbl] double_type
    [div_byte] byte_type
    [div_bit] bit_type
  ] list
  dispatch2
}

define lt : (any any -> bool)
{
  [
    [lt_int] int_type
    [lt_dbl] double_type
    [lt_byte] byte_type
    [lt_bit] bit_type
    [lt_str] string_type
  ] list
  dispatch2
  as_bool
}

define gt : (any any -> bool)
{
  [
    [gt_int] int_type
    [gt_dbl] double_type
    [gt_byte] byte_type
    [gt_bit] bit_type
    [gt_str] string_type
  ] list
  dispatch2
  as_bool
}

define lteq : (any any -> bool)
{
  [
    [lteq_int] int_type
    [lteq_dbl] double_type
    [lteq_byte] byte_type
    [lteq_bit] bit_type
    [lteq_str] string_type
  ] list
  dispatch2
  as_bool
}

define gteq : (any any -> bool)
{
  [
    [gteq_int] int_type
    [gteq_dbl] double_type
    [gteq_byte] byte_type
    [gteq_bit] bit_type
    [gteq_str] string_type
  ] list
  dispatch2
  as_bool
}

//=============================================================================
// Mathematical definitions

define sqr : (any -> any)
{{
  desc:
    Multiplies a value by itself
  test:
    in: 3 sqr
    out: 9
}}
{ dup mul }

define frac : (int int int -> int)
{{
  desc:
    Multiplies an integer by a fraction.
    x num den -> (x * num) / den)
  test:
    in: 6 2 3 frac
    out: 4
  semantics:
    $a $b $c frac == $a $b mul_int $c div_int
}}
{ [mul_int] dip div_int }

//=============================================================================
// Mathematical symbols

define + { add }
define - { sub }
define * { mul }
define % { mod }
define / { div }
define < { lt }
define > { gt }
define <= { lteq }
define >= { gteq }
define == { eq }
define != { neq }


// Dedicated to the public domain by Christopher Diggins
// This file is free to be used, modified or redistributed for any purpose,
// without restriction, obligation or warantee.
// http://www.cdiggins.com

define head : (list -> any)
{{
  desc:
    Replaces a list with the first item
  test:
    in: [1 2 3] list head
    out: 3
}}
{
  uncons popd
}

define tail : (list -> list)
{{
  desc:
    Removes first item from the list
  test:
    in: [1 2 3] list tail
    out: [1 2] list
}}
{
  uncons pop
}

define first : (list -> list any)
{{
  desc:
    Returns the first item in a list
  test:
    in: [1 2 3] list first
    out: [1 2 3] list 3
}}
{
  0 get_at
}

define rest : (list -> list list)
{{
  desc:
    Returns a list with one less item
  test:
    in: [1 2 3] list rest
    out: [1 2 3] list [1 2] list
}}
{
  dup tail
}

define consd
{{
  desc:
    Append the second item on stack to a list in the third position.
  test:
    in: [1 2] list 3 4 consd
    out: [1 2 3] list 4
}}
{ [cons] dip }

define pair : ('a 'b -> list)
{{
  desc:
    Creates a list of two items
  test:
    in: 1 2 pair
    out: [1 2] list
}}
{
  nil bury [cons] dip cons
}

define triple : ('a 'b 'c -> list)
{{
  desc:
    Creates a list of three items
   test:
    in: 1 2 3 triple
    out: [1 2 3] list
}}
{ [pair] dip cons }

define swons : ('a list -> list)
{{
  desc:
    Appends the second item on the stack, to a list in the first item
  test:
    in: 3 [1 2] list swons
    out: [1 2 3] list
}}
{ swap cons }

define uncons2 : (list -> list any any)
{{
  desc:
    Extracts the first and second item from a list
  test:
    in: [1 2 3] list uncons2
    out: [1] list 2 3
}}
{ uncons [uncons] dip }

define unpair : (list -> any any)
{{
  desc:
    Extracts the first and second item from a list
  test:
    in: [1 2] list unpair
    out: 1 2
}}
{ uncons [head] dip }

/*
define fold : (list 'a ('a 'a -> 'a) -> list)
{{
  level:
    1
  category:
    standard-lists
  desc:
    Also known as a reduce function, this combines adjacent values
    in a list using an initial value and a binary function.
  semantics:
    define fold(xs x f) { xs empty [x] [xs uncons x f apply f fold] if }
  test:
    in: [1 2 3 4] list 0 [add_int] fold
    out: 10
}}
{
  ...
}

define rev : (list -> list)
{{
  desc:
    Reverses a list
  test:
    in: [1 2 3] list rev
    out: [3 2 1] list
}}
{ nil [cons] fold }

define small : (list -> list bool)
{{
  desc:
    Returns true if a list contains one element or is empty
  test:
    in: 1 unit small popd
    out: true
}}
{ empty [true] [rest empty popd] if }

define split : ('A list ('b -> bool) -> 'A list list)
{{
  desc:
    Splits a list into two new lists
  test:
    in: [0 1 2 3 4] list [even popd] split
    out: [1 3] list [0 2 4] list
}}
{
  dup2 filter
  [negate filter] dip
}

define cons_first : (list 'a -> list)
{{
  desc:
    Appends item to first list in a pair of lists
  test:
    in: [1 2] list [3 4] list pair 5 cons_first
    out: [1 2] list [3 4 5] list pair
}}
{ [unpair] dip cons pair }

define cons_second : (list 'a -> list)
{{
  desc
    Appends item to second list in a pair of lists
  test:
    in: [1 2] list [3 4] list pair 5 cons_second
    out: [1 2 5] list [3 4] list pair
}}
{ [unpair] dip swap [cons] dip pair }

define move_head : (list list -> list list)
{{
  desc:
    Copies the head from one list to another.
  test:
    in: [1 2] list [3 4] list move_head
    out: [1 2 4] list [3] list
}}
{ uncons swap [cons] dip }

define index_of : (list 'a -> list int)
{{
  desc:
    Returns the index of a value in a list or the size of the list
    if not found.
  test:
    in: [1 2 3 4] list 1 index_of popd
    out: 3
  test:
    in: ['a' 'b' 'c'] list 'c' index_of popd
    out: 0
  test:
    in: ['a' 'b' 'c'] list 'd' index_of popd
    out: 3
}}
{ [neq] papply count_while }

define split_at : (list int -> list list)
{{
  desc:
    Splits a list in two at an index, the top result contains the second half
    sand the second result contains the first half of the original list
}}
{ nil bury [move_head] swap repeat }

define dhead : (list -> list any)
{{
  desc:
    Returns the head of a list, leaving the original list on the stack.
  test:
    in: [1 2] list dhead
    out: [1 2] list 2
}}
{ first }

define dtail : (list -> list list)
{{
  desc:
    Returns the tail of a list, leaving the original list on the stack.
  test:
    in: [1 2 3] list dtail
    out: [1 2 3] list [1 2] list
}}
{ rest }

define head_eq : (list any -> list bool)
{{
  test:
    in: [1 2] list 2 head_eq popd
    out: true

  test:
    in: [1 2] list 1 head_eq popd
    out: false
}}
{ [dhead] dip eq }
*/
